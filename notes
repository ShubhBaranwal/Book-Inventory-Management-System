/*

part (1) how to create router and different section using react router dom

1.1 in main.jsx we will create roter setting 
let router=createBrowserRouter([{
path:"/",
element:<App/>,
children:[
    {path:"/" element:<Home/>},
    {path:"/Bag",element:<Bag/>}
]
}])

<RouterProvider router={router}>

</RouterProvider>


1.2=>
create a outlet element in where situated bag and home component and creates routes name folder insert here App.jsx and App.css and Home.jsx and Bag.jsx
in App.jsx
<NavBar/>
<Outlet/>
<Footer/>


1.3 create a router link in navbar for bagicon and and amazon logo 
<Link to="/bag">Bag Icon</Link>
<Link to="/">AmazonLogo</Link>


*/

/*Part 2
how to create Home component and different slice of react redux
(1) we will create Home.jsx where we iterate all of HomeItems using Map.



(2) we will create a store file and first create index.js file

const amazonStore=configureStore({
    reducer:{
        item:itemSlice.reducer;
    }
})

(3) create a store file in main.jsx
<Provider store={amazonStore}>
....
<Provider/>


(4) then we will create a itemSlice.js which which give to fetch Item Section( FetchItem.jsx) to a method to take all data of shoes

let itemSlice=createSlice({
    name:"item",
    initialState:[],
    reducer:{
        addInitialState:(state,action)=>{
            return action.payload
        }
    }
})

export const itemAction=itemSlice.action;

export default itemSlice;


(5) create a FetchItems.jsx component which fetches data from server 
let dispatch=useDispatch():we we find data from fetch method we want to send data to  itemSlice Method then we will use dispatch Method to do this


let FetchItem=()=>{
let dispatch=useDispatch()
    useEffect(()=>{

          fetch("path").then((res)=>{
                   return res.json;
                    }).then((data)=>{
                   dispatch(itemAction.addInitialState(data[0]))
                 })

             },[])



    return(

    )
}


(6) We will recieve data from itemSlice in Home.jsx using 
useSelector

let Home=()=>{
let items=useSelector(store => store.item)



    return(


{
    items.map((item)=>{
        return <HomeItem item ={item}/>
    })
}




    )
}


(7) how to create fetchingSlice;

1 data is already came
2 data is loading and comming
3 data fetch done


let fetchSlice=createSlice(
    {
        name:"fetchItems",
        initialState:{
            fetchData:false,
            fetchingData:false
        },
        reducers:{
        markFetchDone:(state,acation)=>{
            state.fetchData=true;
        },
        markFetchStarted:(state,action)=>{
          state.fetchingData=true;   
        },
        markFetchingStops:(state,acation)=>{
            status.fetchingData=false;
        }
 }
    }
)

export let fetchAction=fetchSlice.actions;

export default fetchSlice;

then go to index.js write fetchItem:fetchSlice.action;


(8) go to fetchItems.jsx component to setting the fetching status

    useEffect(()=>{

          fetch("path").then((res)=>{
            dispatch(fetchAction.markFetchStarted())
                   return res.json;
                    }).then((data)=>{
                     dispatch(fetchAction.markFetchDone())   
                   dispatch(itemAction.addInitialState(data[0]))
                   dispatch(fetchAction.markFetchingStops())
                 })

             },[])





*/











import {createSlice} from "@reduxjs/toolkit"

let fetchItemSlice=createSlice({
name:"AllaccData",
initialState:{
    AccInfo:[],
    anotherHistory:[]
},
reducers:{
    addInitialData:(state,action)=>{
        state.AccInfo=action.payload
    },
    addNewAccount:(state,action)=>{
        state.AccInfo.push(action.payload)
    },
    updateDebitAmt:(state,action)=>{
     let AccNo=action.payload.AccValueElVal;
     let DbtAmt=action.payload.AccBalenceElVal;
     
     let index=state.AccInfo.findIndex(item => item.acc == AccNo);
     
if(index !== -1){
    if(state.AccInfo[index].balence >= Number(DbtAmt)){
        state.AccInfo[index].balence -=Number(DbtAmt)
    
state.anotherHistory.push({
    fromAc:AccNo,
    toAc:"self",
    type:"Debited",
    amt:`-${DbtAmt}`,
    currentBalenceReceive:"-",
    currentBalenceSender:state.AccInfo[index].balence
})
    }else  {
        alert(`${DbtAmt} Rupee nahi hai`)

    }}else{
    alert(`${AccNo} is not found`)
}


     
    },

    updateCreditAmt:(state,action)=>{
        let AccNo=action.payload.AccValueElVal;
        let CreditAmt=action.payload.AccBalenceElVal;
        let index=state.AccInfo.findIndex(item => item.acc == AccNo);

        if(index !== -1){
        console.log(typeof state.AccInfo[index].balence);
            state.AccInfo[index].balence += Number(CreditAmt)
    
          state.anotherHistory.push({
            fromAc:"self",
            toAc:AccNo,
            type:"Credited",
            amt:`+${CreditAmt}`,
            currentBalenceSender:"-",
            currentBalenceReceive:state.AccInfo[index].balence,
        })
        
        }else{
            alert(`${AccNo} is not found.  please check your Account No`)
        }
    },
    transferAmount:(state,action)=>{
        let fromAcc=action.payload.fromAccVal;
        console.log(fromAcc);
        let toAcc=action.payload.toAccVal;
        let transAmt=Number(action.payload.TransferAmtVal);

        let indexFrom=state.AccInfo.findIndex(item => item.acc == fromAcc);
        let indexTo=state.AccInfo.findIndex(item => item.acc == toAcc);

   if(indexFrom !== -1 && indexTo !== -1){

if(state.AccInfo[indexFrom].balence >= Number(transAmt)){
 
    state.AccInfo[indexFrom].balence -= transAmt
    state.AccInfo[indexTo].balence += transAmt
    

state.anotherHistory.push({
    fromAc:fromAcc,
    toAc:toAcc,
    type:"transfered",
    amt:transAmt,
    currentBalenceSender:state.AccInfo[indexFrom].balence,
    currentBalenceReceive:state.AccInfo[indexTo].balence,
})

}else{
alert("insufficiant Amount")
}


   }else{
    alert(`check your Account Number`)
   }


    }
}
})  

export const fetchItemActions=fetchItemSlice.actions;

export default fetchItemSlice;